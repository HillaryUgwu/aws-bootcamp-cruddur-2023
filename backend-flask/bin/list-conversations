#!/usr/bin/env python3

import boto3
import sys
import json
import os
import datetime

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..'))
sys.path.insert(0,parent_path)
print(f'++{sys.path}')
from lib.db import db
from lib.ddb import Ddb

attrs = {
  'endpoint_url': 'http://localhost:8000'
}

if len(sys.argv) == 2:
  if "prod" in sys.argv[1]:
    attrs = {}

print(f"Endpoint_URL================={attrs}")
ddb = boto3.client('dynamodb',**attrs)
table_name = 'cruddur-messages'

def get_my_user_uuid():
  sql = """
    SELECT 
      users.uuid
    FROM users
    WHERE
      users.handle =%(handle)s
  """
  uuid = db.query_value(sql,{
    'handle':  'ohahuru'
  })
  return uuid

my_user_uuid = get_my_user_uuid()
print(f"List-conversations ===== my-uuid: == {my_user_uuid}")

current_year = datetime.datetime.now().year
# define the query parameters
query_params = {
  'TableName': table_name,
      'KeyConditionExpression': 'pk = :pk AND begins_with(sk,:year)',
  'ScanIndexForward': False,
  'ExpressionAttributeValues': {
    ':year': {'S': str(current_year) },
    ':pk': {'S': f"GRP#{my_user_uuid}"}
  },
  'ReturnConsumedCapacity': 'TOTAL'
}

# query the table
response = ddb.query(**query_params)
print('Standard query start +++++++++++++++++++++++++++++++++++')
# print the items returned by the query
print(f"Standard query response ========================= {json.dumps(response, sort_keys=True, indent=2)}")
print('Standard query end +++++++++++++++++++++++++++++++++++')
year = str(current_year)
query_params = {
      'TableName': table_name,
      'KeyConditionExpression': 'pk = :pk AND begins_with(sk,:year)',
      'ScanIndexForward': False,
      'Limit': 20,
      'ExpressionAttributeValues': {
        ':year': {'S': year },
        ':pk': {'S': f"GRP#{my_user_uuid}"}
      }
    }

response = ddb.query(**query_params)
print('Standard query with GSI start +++++++++++++++++++++++++++++++++++')
print(f"Standard query with GSI reseponse ================== {json.dumps(response, sort_keys=True, indent=2)}")
print('Standard query with GSI end +++++++++++++++++++++++++++++++++++')


print('Home activities query start +++++++++++++++++++++++++++++++++++')
sql = db.template('activities','home')
results = db.query_array_json(sql)
print(f"Home activities query result===================== {results}")
print('Home activities query end+++++++++++++++++++++++++++++++++++')


print('Message groups query start +++++++++++++++++++++++++++++++++++')
ddb = Ddb.client()
data = Ddb.list_message_groups(ddb,my_user_uuid)
print(f"Message groups query data===================== {data}")

print('Message groups query end +++++++++++++++++++++++++++++++++++')
