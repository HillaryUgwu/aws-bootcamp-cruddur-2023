AWSTemplateFormatVersion: '2010-09-09'
Description: |
  - CloudFormation template to create 
  - Cognito User Pool, 
  - App Client, and 
  - Lambda function with specific configurations

Parameters:
  UserPoolName:
    Type: String
    Default: Cruddur-user-pool
  ClientName:
    Type: String
    Default: Cruddur
  LambdaFunctionName:
    Type: String
    Default: cruddur-post-confirmation
  BucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cruddur/ArtifactBucketName
  ConnectionURL:
   Type: AWS::SSM::Parameter::Value<String>
   Default: /cruddur/backend-flask/CONNECTION_URL
  NetworkingStack:
    Type: String
    Description: This is the base layer of networking components eg. VPC, Subnets
    Default: CrudNet
  CrudDBStack:
    Type: String
    Description: This is the DB stack
    Default: CrudDb

Resources:
  CruddurUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority:   1
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      LambdaConfig:
        PostConfirmation: !GetAtt cruddurpostconfirmation.Arn
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      DeletionProtection: ACTIVE

  CruddurAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref ClientName
      GenerateSecret: false
      UserPoolId: !Ref CruddurUserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrudCognitoLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              ArnLike:
                "AWS:SourceArn": !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  cruddurpostconfirmation:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      MemorySize: 128
      Timeout: 3
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Code:
        S3Bucket: !Ref BucketName
        S3Key:  "lambdas/cognito/lambda_function.zip"
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:898466741470:layer:psycopg2-py38:2"
      Environment:
        Variables:
          CONNECTION_URL: !Ref ConnectionURL      
      Role: !GetAtt LambdaExecutionRole.Arn
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt CognitoLambdaSG.GroupId
        SubnetIds: { 'Fn::Split' : [ ','  , { "Fn::ImportValue": { "Fn::Sub": "${NetworkingStack}PublicSubnetIds" }}] }
        
  CognitoLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkingStack}VpcId

  RDSDBSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue:
          !Sub ${CrudDBStack}ServiceSecurityGroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      Description: COGNITOPOSTCONF
      SourceSecurityGroupId: !GetAtt CognitoLambdaSG.GroupId

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt cruddurpostconfirmation.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CruddurUserPool.Arn

  UserPoolIdSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cruddur/cognito-user-pool-id
      Type: String
      Value: !Ref CruddurUserPool

  ClientIdSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cruddur/cognito-client-id
      Type: String
      Value: !GetAtt CruddurAppClient.ClientId
